/* tslint:disable */
/* eslint-disable */
/**
 * Boudicca Enricher
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface EnrichRequestDTO
 */
export interface EnrichRequestDTO {
    /**
     * 
     * @type {Array<Event>}
     * @memberof EnrichRequestDTO
     */
    'events'?: Array<Event>;
}
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'startDate': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Event
     */
    'data'?: { [key: string]: string; };
}

/**
 * EnricherControllerApi - axios parameter creator
 * @export
 */
export const EnricherControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EnrichRequestDTO} enrichRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrich: async (enrichRequestDTO: EnrichRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'enrichRequestDTO' is not null or undefined
            assertParamExists('enrich', 'enrichRequestDTO', enrichRequestDTO)
            const localVarPath = `/enrich`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enrichRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnricherControllerApi - functional programming interface
 * @export
 */
export const EnricherControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnricherControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {EnrichRequestDTO} enrichRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enrich(enrichRequestDTO: EnrichRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enrich(enrichRequestDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EnricherControllerApi.enrich']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * EnricherControllerApi - factory interface
 * @export
 */
export const EnricherControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnricherControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {EnrichRequestDTO} enrichRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrich(enrichRequestDTO: EnrichRequestDTO, options?: any): AxiosPromise<Array<Event>> {
            return localVarFp.enrich(enrichRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnricherControllerApi - object-oriented interface
 * @export
 * @class EnricherControllerApi
 * @extends {BaseAPI}
 */
export class EnricherControllerApi extends BaseAPI {
    /**
     * 
     * @param {EnrichRequestDTO} enrichRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnricherControllerApi
     */
    public enrich(enrichRequestDTO: EnrichRequestDTO, options?: AxiosRequestConfig) {
        return EnricherControllerApiFp(this.configuration).enrich(enrichRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



