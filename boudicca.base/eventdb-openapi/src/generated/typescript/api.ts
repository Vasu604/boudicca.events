/* tslint:disable */
/* eslint-disable */
/**
 * Boudicca EventDB
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ComplexSearchDto
 */
export interface ComplexSearchDto {
    /**
     * 
     * @type {Set<string>}
     * @memberof ComplexSearchDto
     */
    'anyKeyExactMatch'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof ComplexSearchDto
     */
    'allKeyExactMatch'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof ComplexSearchDto
     */
    'anyKeyOrValueContains'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof ComplexSearchDto
     */
    'allKeyOrValueContains'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof ComplexSearchDto
     */
    'anyKeyOrValueExactMatch'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof ComplexSearchDto
     */
    'allKeyOrValueExactMatch'?: Set<string>;
    /**
     * 
     * @type {Set<Array<string>>}
     * @memberof ComplexSearchDto
     */
    'anyValueForKeyContains'?: Set<Array<string>>;
    /**
     * 
     * @type {Set<Array<string>>}
     * @memberof ComplexSearchDto
     */
    'allValueForKeyContains'?: Set<Array<string>>;
    /**
     * 
     * @type {Set<Array<string>>}
     * @memberof ComplexSearchDto
     */
    'anyValueForKeyExactMatch'?: Set<Array<string>>;
    /**
     * 
     * @type {Set<Array<string>>}
     * @memberof ComplexSearchDto
     */
    'allValueForKeyExactMatch'?: Set<Array<string>>;
}
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'startDate': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Event
     */
    'data': { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface SearchDTO
 */
export interface SearchDTO {
    /**
     * 
     * @type {string}
     * @memberof SearchDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchDTO
     */
    'fromDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchDTO
     */
    'toDate'?: string;
}

/**
 * EventPublisherResourceApi - axios parameter creator
 * @export
 */
export const EventPublisherResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        list: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchDTO} searchDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        search: async (searchDTO: SearchDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchDTO' is not null or undefined
            assertParamExists('search', 'searchDTO', searchDTO)
            const localVarPath = `/events/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ComplexSearchDto} complexSearchDto 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        searchBy: async (complexSearchDto: ComplexSearchDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'complexSearchDto' is not null or undefined
            assertParamExists('searchBy', 'complexSearchDto', complexSearchDto)
            const localVarPath = `/events/searchBy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(complexSearchDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventPublisherResourceApi - functional programming interface
 * @export
 */
export const EventPublisherResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventPublisherResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async list(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EventPublisherResourceApi.list']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {SearchDTO} searchDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async search(searchDTO: SearchDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(searchDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EventPublisherResourceApi.search']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {ComplexSearchDto} complexSearchDto 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async searchBy(complexSearchDto: ComplexSearchDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchBy(complexSearchDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EventPublisherResourceApi.searchBy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * EventPublisherResourceApi - factory interface
 * @export
 */
export const EventPublisherResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventPublisherResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        list(options?: any): AxiosPromise<Set<Event>> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchDTO} searchDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        search(searchDTO: SearchDTO, options?: any): AxiosPromise<Set<Event>> {
            return localVarFp.search(searchDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ComplexSearchDto} complexSearchDto 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        searchBy(complexSearchDto: ComplexSearchDto, options?: any): AxiosPromise<Set<Event>> {
            return localVarFp.searchBy(complexSearchDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventPublisherResourceApi - object-oriented interface
 * @export
 * @class EventPublisherResourceApi
 * @extends {BaseAPI}
 */
export class EventPublisherResourceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EventPublisherResourceApi
     */
    public list(options?: RawAxiosRequestConfig) {
        return EventPublisherResourceApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchDTO} searchDTO 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EventPublisherResourceApi
     */
    public search(searchDTO: SearchDTO, options?: RawAxiosRequestConfig) {
        return EventPublisherResourceApiFp(this.configuration).search(searchDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ComplexSearchDto} complexSearchDto 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EventPublisherResourceApi
     */
    public searchBy(complexSearchDto: ComplexSearchDto, options?: RawAxiosRequestConfig) {
        return EventPublisherResourceApiFp(this.configuration).searchBy(complexSearchDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IngestionResourceApi - axios parameter creator
 * @export
 */
export const IngestionResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Event} event 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        add: async (event: Event, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'event' is not null or undefined
            assertParamExists('add', 'event', event)
            const localVarPath = `/ingest/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(event, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<{ [key: string]: string; }>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEntries: async (requestBody: Array<{ [key: string]: string; }>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addEntries', 'requestBody', requestBody)
            const localVarPath = `/ingest/entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEntry: async (requestBody: { [key: string]: string; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addEntry', 'requestBody', requestBody)
            const localVarPath = `/ingest/entry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IngestionResourceApi - functional programming interface
 * @export
 */
export const IngestionResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IngestionResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Event} event 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async add(event: Event, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.add(event, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['IngestionResourceApi.add']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {Array<{ [key: string]: string; }>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEntries(requestBody: Array<{ [key: string]: string; }>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEntries(requestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['IngestionResourceApi.addEntries']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEntry(requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEntry(requestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['IngestionResourceApi.addEntry']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * IngestionResourceApi - factory interface
 * @export
 */
export const IngestionResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IngestionResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {Event} event 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        add(event: Event, options?: any): AxiosPromise<void> {
            return localVarFp.add(event, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<{ [key: string]: string; }>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEntries(requestBody: Array<{ [key: string]: string; }>, options?: any): AxiosPromise<void> {
            return localVarFp.addEntries(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEntry(requestBody: { [key: string]: string; }, options?: any): AxiosPromise<void> {
            return localVarFp.addEntry(requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IngestionResourceApi - object-oriented interface
 * @export
 * @class IngestionResourceApi
 * @extends {BaseAPI}
 */
export class IngestionResourceApi extends BaseAPI {
    /**
     * 
     * @param {Event} event 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof IngestionResourceApi
     */
    public add(event: Event, options?: RawAxiosRequestConfig) {
        return IngestionResourceApiFp(this.configuration).add(event, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<{ [key: string]: string; }>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngestionResourceApi
     */
    public addEntries(requestBody: Array<{ [key: string]: string; }>, options?: RawAxiosRequestConfig) {
        return IngestionResourceApiFp(this.configuration).addEntries(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngestionResourceApi
     */
    public addEntry(requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig) {
        return IngestionResourceApiFp(this.configuration).addEntry(requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PublisherResourceApi - axios parameter creator
 * @export
 */
export const PublisherResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublisherResourceApi - functional programming interface
 * @export
 */
export const PublisherResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublisherResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async all(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<{ [key: string]: string; }>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.all(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PublisherResourceApi.all']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PublisherResourceApi - factory interface
 * @export
 */
export const PublisherResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublisherResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        all(options?: any): AxiosPromise<Set<{ [key: string]: string; }>> {
            return localVarFp.all(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublisherResourceApi - object-oriented interface
 * @export
 * @class PublisherResourceApi
 * @extends {BaseAPI}
 */
export class PublisherResourceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublisherResourceApi
     */
    public all(options?: RawAxiosRequestConfig) {
        return PublisherResourceApiFp(this.configuration).all(options).then((request) => request(this.axios, this.basePath));
    }
}



