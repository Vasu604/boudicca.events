/* tslint:disable */
/* eslint-disable */
/**
 * Boudicca EventDB
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'startDate': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Event
     */
    'data': { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface FilterQueryDTO
 */
export interface FilterQueryDTO {
    /**
     * 
     * @type {Array<FilterQueryEntryDTO>}
     * @memberof FilterQueryDTO
     */
    'entries': Array<FilterQueryEntryDTO>;
}
/**
 * 
 * @export
 * @interface FilterQueryEntryDTO
 */
export interface FilterQueryEntryDTO {
    /**
     * 
     * @type {string}
     * @memberof FilterQueryEntryDTO
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof FilterQueryEntryDTO
     */
    'multiline': boolean;
}
/**
 * 
 * @export
 * @interface Filters
 */
export interface Filters {
    /**
     * 
     * @type {Set<string>}
     * @memberof Filters
     */
    'categories': Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof Filters
     */
    'locationNames': Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof Filters
     */
    'locationCities': Set<string>;
}
/**
 * 
 * @export
 * @interface QueryDTO
 */
export interface QueryDTO {
    /**
     * 
     * @type {string}
     * @memberof QueryDTO
     */
    'query'?: string;
    /**
     * 
     * @type {number}
     * @memberof QueryDTO
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof QueryDTO
     */
    'size'?: number;
}
/**
 * 
 * @export
 * @interface ResultDTO
 */
export interface ResultDTO {
    /**
     * 
     * @type {Array<{ [key: string]: string; }>}
     * @memberof ResultDTO
     */
    'result': Array<{ [key: string]: string; }>;
    /**
     * 
     * @type {number}
     * @memberof ResultDTO
     */
    'totalResults': number;
}
/**
 * 
 * @export
 * @interface SearchDTO
 */
export interface SearchDTO {
    /**
     * 
     * @type {string}
     * @memberof SearchDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchDTO
     */
    'fromDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchDTO
     */
    'toDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchDTO
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchDTO
     */
    'locationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchDTO
     */
    'locationCity'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchDTO
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchDTO
     */
    'size'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchDTO
     */
    'flags'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof SearchDTO
     */
    'durationShorter'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchDTO
     */
    'durationLonger'?: number;
}
/**
 * 
 * @export
 * @interface SearchResultDTO
 */
export interface SearchResultDTO {
    /**
     * 
     * @type {Array<Event>}
     * @memberof SearchResultDTO
     */
    'result': Array<Event>;
    /**
     * 
     * @type {number}
     * @memberof SearchResultDTO
     */
    'totalResults': number;
}

/**
 * SearchControllerApi - axios parameter creator
 * @export
 */
export const SearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        filters: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/filters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FilterQueryDTO} filterQueryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filtersFor: async (filterQueryDTO: FilterQueryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filterQueryDTO' is not null or undefined
            assertParamExists('filtersFor', 'filterQueryDTO', filterQueryDTO)
            const localVarPath = `/filtersFor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(filterQueryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QueryDTO} queryDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        query: async (queryDTO: QueryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryDTO' is not null or undefined
            assertParamExists('query', 'queryDTO', queryDTO)
            const localVarPath = `/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QueryDTO} queryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryEntries: async (queryDTO: QueryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryDTO' is not null or undefined
            assertParamExists('queryEntries', 'queryDTO', queryDTO)
            const localVarPath = `/queryEntries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchDTO} searchDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        search: async (searchDTO: SearchDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchDTO' is not null or undefined
            assertParamExists('search', 'searchDTO', searchDTO)
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchControllerApi - functional programming interface
 * @export
 */
export const SearchControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async filters(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Filters>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filters(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SearchControllerApi.filters']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {FilterQueryDTO} filterQueryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filtersFor(filterQueryDTO: FilterQueryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<string>; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filtersFor(filterQueryDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SearchControllerApi.filtersFor']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {QueryDTO} queryDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async query(queryDTO: QueryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.query(queryDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SearchControllerApi.query']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {QueryDTO} queryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryEntries(queryDTO: QueryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryEntries(queryDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SearchControllerApi.queryEntries']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {SearchDTO} searchDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async search(searchDTO: SearchDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResultDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(searchDTO, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SearchControllerApi.search']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SearchControllerApi - factory interface
 * @export
 */
export const SearchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        filters(options?: any): AxiosPromise<Filters> {
            return localVarFp.filters(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FilterQueryDTO} filterQueryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filtersFor(filterQueryDTO: FilterQueryDTO, options?: any): AxiosPromise<{ [key: string]: Array<string>; }> {
            return localVarFp.filtersFor(filterQueryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QueryDTO} queryDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        query(queryDTO: QueryDTO, options?: any): AxiosPromise<SearchResultDTO> {
            return localVarFp.query(queryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QueryDTO} queryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryEntries(queryDTO: QueryDTO, options?: any): AxiosPromise<ResultDTO> {
            return localVarFp.queryEntries(queryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchDTO} searchDTO 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        search(searchDTO: SearchDTO, options?: any): AxiosPromise<SearchResultDTO> {
            return localVarFp.search(searchDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchControllerApi - object-oriented interface
 * @export
 * @class SearchControllerApi
 * @extends {BaseAPI}
 */
export class SearchControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SearchControllerApi
     */
    public filters(options?: RawAxiosRequestConfig) {
        return SearchControllerApiFp(this.configuration).filters(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FilterQueryDTO} filterQueryDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchControllerApi
     */
    public filtersFor(filterQueryDTO: FilterQueryDTO, options?: RawAxiosRequestConfig) {
        return SearchControllerApiFp(this.configuration).filtersFor(filterQueryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QueryDTO} queryDTO 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SearchControllerApi
     */
    public query(queryDTO: QueryDTO, options?: RawAxiosRequestConfig) {
        return SearchControllerApiFp(this.configuration).query(queryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QueryDTO} queryDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchControllerApi
     */
    public queryEntries(queryDTO: QueryDTO, options?: RawAxiosRequestConfig) {
        return SearchControllerApiFp(this.configuration).queryEntries(queryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchDTO} searchDTO 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SearchControllerApi
     */
    public search(searchDTO: SearchDTO, options?: RawAxiosRequestConfig) {
        return SearchControllerApiFp(this.configuration).search(searchDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



